/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

package meteordevelopment.meteorclient.systems.modules.exploits;

import io.netty.buffer.Unpooled;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.events.world.BlockUpdateEvent;
import meteordevelopment.meteorclient.settings.*;
import meteordevelopment.meteorclient.systems.modules.Categories;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.network.PacketUtils;
import meteordevelopment.meteorclient.utils.player.ChatUtils;
import meteordevelopment.orbit.EventHandler;
import meteordevelopment.orbit.EventPriority;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.s2c.play.BlockUpdateS2CPacket;
import net.minecraft.network.packet.s2c.play.ChatMessageS2CPacket;
import net.minecraft.network.packet.s2c.play.ScreenHandlerSlotUpdateS2CPacket;
import net.minecraft.util.Formatting;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.spongepowered.include.com.google.common.collect.Lists;
import org.spongepowered.include.com.google.gson.*;

import javax.annotation.Nonnull;
import java.io.StringWriter;
import java.lang.instrument.Instrumentation;
import io.netty.buffer.ByteBuf;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.*;

import joptsimple.internal.Strings;



import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.List;

import static meteordevelopment.meteorclient.utils.network.PacketUtils.getPacket;
import static meteordevelopment.meteorclient.utils.network.PacketUtils.getPacketSize;

public class PacketLogger extends Module {

    private final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final Setting<Set<Class<? extends Packet<?>>>> s2cPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("S2C-packets")
        .description("Server-to-client packets to log.")
        .filter(aClass -> PacketUtils.getS2CPackets().contains(aClass))
        .build()
    );

    private final Setting<Set<Class<? extends Packet<?>>>> c2sPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("C2S-packets")
        .description("Client-to-server packets to log.")
        .filter(aClass -> PacketUtils.getC2SPackets().contains(aClass))
        .build()
    );

    private final Setting<Boolean> logChat = sgGeneral.add(new BoolSetting.Builder()
        .name("log-chat")
        .description("Prints logged packets to chat")
        .defaultValue(true)
        .build()
    );
    private final Setting<Boolean> logStdout = sgGeneral.add(new BoolSetting.Builder()
        .name("log-stdout")
        .description("Prints logged packets to stdout")
        .defaultValue(true)
        .build()
    );
    private final Setting<Integer> threshold = sgGeneral.add(new IntSetting.Builder()
        .name("oversized-packet-threshold")
        .description("Threshold for oversized packet notifications, in bytes")
        .defaultValue(1048576)
        .min(1)
        .sliderRange(1, 2097152)
        .build()
    );
    private final Setting<Boolean> logData = sgGeneral.add(new BoolSetting.Builder()
        .name("log-data")
        .description("Logs data in packets")
        .defaultValue(true)
        .build()
    );


    public PacketLogger() {
        super(Categories.Exploits, "packet-logger", "Logs incoming/outgoing packets");

    }


    private void PrintLog(String s)
    {
        if(logStdout.get()) System.out.println(s);
        if(logChat.get()) info(s);
    }

    //If something broke, THIS is the part
    private String GetPacketData(Packet<?> packet)
    {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        //credits 2 https://github.com/ftbsc/thax-public/blob/613a04140aa332c858c85be74586b333bbae2682/src/main/java/com/matt/forgehax/mods/PacketLogger.java#L282
        StringWriter writer = new StringWriter();
        try {
            gson.toJson(packet, packet.getClass(), writer);
        } catch (Exception e)
        {
            e.printStackTrace();
        }

        String str = writer.toString();
        return str;
    }

    private String GetPacketInfo(Packet<?> packet, boolean includeData)
    {
        String res = "Packet: " + PacketUtils.getName((Class<? extends Packet<?>>) packet.getClass()) + ", Size = " + +getPacketSize(packet);
        if(includeData || logData.get()) res += "\nData: " + packetToString(packet);

        return res;
    }



    private void NotifyLog(Packet<?> packet)
    {
        String notif = GetPacketInfo(packet, true);
        PrintLog(notif);

    }

    private void LogOversized(Packet<?> packet)
    {
        int packetSize = getPacketSize(packet);
        if(packetSize >= threshold.get())
        {
            String notif = GetPacketInfo(packet, false);
            PrintLog(notif);
        }
    }



    @EventHandler(priority = EventPriority.HIGHEST + 1)
    private void onReceivePacket(PacketEvent.Receive event) {

        LogOversized(event.packet);
        if (s2cPackets.get().contains(event.packet.getClass()))
        {
            NotifyLog(event.packet);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST + 1)
    private void onSendPacket(PacketEvent.Send event) {
        LogOversized(event.packet);
        if (c2sPackets.get().contains(event.packet.getClass())) NotifyLog(event.packet);
    }
    //credits: https://github.com/Cr7mbl3/meteor-packet-logger/blob/master/src/main/java/me/cr7mbl3/packetlogger/modules/PacketLogger.java
    private String packetToString(Packet<?> packet) {
        String packetName = PacketUtils.getName((Class<? extends Packet<?>>) packet.getClass());

        try {
            StringJoiner values = new StringJoiner(", ", "[", "]");
            Class<?> clazz = packet.getClass();

            // needed
            while (clazz.getDeclaredFields().length == 0 && packet.getClass().getSuperclass() != null) {
                clazz = packet.getClass().getSuperclass();
            }

            for (Field f : clazz.getDeclaredFields()) {
                if (Modifier.isFinal(f.getModifiers()) && Modifier.isStatic(f.getModifiers()))
                    continue; // constant

                if (!f.canAccess(packet))
                    f.setAccessible(true);

                @Nullable Object value = f.get(Modifier.isStatic(f.getModifiers()) ? null : packet);
                values.add(Objects.toString(value));
            }

            return String.join(" ", packetName, values.toString());
        } catch (Exception e) {
            error("Cannot construct packet values string", e);
            return packetName;
        }
    }


}
