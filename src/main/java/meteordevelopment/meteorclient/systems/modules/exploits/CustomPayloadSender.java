/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

package meteordevelopment.meteorclient.systems.modules.exploits;


import io.netty.buffer.Unpooled;
import meteordevelopment.meteorclient.MeteorClient;
import meteordevelopment.meteorclient.gui.GuiTheme;
import meteordevelopment.meteorclient.gui.widgets.WLabel;
import meteordevelopment.meteorclient.gui.widgets.WWidget;
import meteordevelopment.meteorclient.gui.widgets.containers.WHorizontalList;
import meteordevelopment.meteorclient.gui.widgets.pressable.WButton;
import meteordevelopment.meteorclient.systems.modules.Categories;
import meteordevelopment.meteorclient.systems.modules.Module;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.MutableText;
import net.minecraft.text.Style;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import net.minecraft.util.Identifier;
import org.lwjgl.BufferUtils;
import org.lwjgl.PointerBuffer;
import org.lwjgl.system.MemoryUtil;
import org.lwjgl.util.tinyfd.TinyFileDialogs;

import java.io.*;
import java.nio.ByteBuffer;

public class CustomPayloadSender extends Module{
    private File file = new File(MeteorClient.FOLDER, "payload.bin");
    private final PointerBuffer filters;

    public CustomPayloadSender() {
        super(Categories.Exploits, "custom-payload-sender", "Sends a custom payload packet, using contents from the specified file.");

        if (!file.exists()) {
            file = null;
        }

        filters = BufferUtils.createPointerBuffer(1);

        ByteBuffer txtFilter = MemoryUtil.memASCII("*.bin");

        filters.put(txtFilter);
        filters.rewind();
    }
    @Override
    public void onActivate() {
        if (file == null || !file.exists()) {
            info("No file selected, please select a file in the GUI.");
            toggle();
            return;
        }
        if (file.length() == 0) {
            MutableText message = Text.literal("");
            message.append(Text.literal("The payload file is empty! ").formatted(Formatting.RED));
            message.append(Text.literal("Click here to edit it.")
                .setStyle(Style.EMPTY
                    .withFormatting(Formatting.UNDERLINE, Formatting.RED)
                    .withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file.getAbsolutePath()))
                )
            );
            info(message);
            toggle();
            return;
        }
        byte[] buffer = {};
        try (FileInputStream stream = new FileInputStream(file)) {

            buffer = stream.readAllBytes();
            stream.close();
        } catch (IOException ignored) {
            error("Failed to read the file.");
            return;
        }
        info("Sending Payload: " + bytesToHex(buffer));
        PacketByteBuf byteBuf = new PacketByteBuf(Unpooled.buffer());
        byteBuf.writeByteArray(buffer);

        mc.player.networkHandler.sendPacket(new CustomPayloadC2SPacket(new Identifier("minecraft", "blackware"), byteBuf));
        toggle();
    }
    @Override
    public WWidget getWidget(GuiTheme theme) {
        WHorizontalList list = theme.horizontalList();

        WButton selectFile = list.add(theme.button("Select File")).widget();

        WLabel fileName = list.add(theme.label((file != null && file.exists()) ? file.getName() : "No file selected.")).widget();

        selectFile.action = () -> {
            String path = TinyFileDialogs.tinyfd_openFileDialog(
                "Select File",
                new File(MeteorClient.FOLDER, "payload.bin").getAbsolutePath(),
                filters,
                null,
                false
            );

            if (path != null) {
                file = new File(path);
                fileName.set(file.getName());
            }
        };

        return list;
    }
    private static final char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = HEX_ARRAY[v >>> 4];
            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }



}

