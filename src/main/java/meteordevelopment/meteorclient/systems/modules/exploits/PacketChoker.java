/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

package meteordevelopment.meteorclient.systems.modules.exploits;

import io.netty.channel.Channel;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.settings.BoolSetting;
import meteordevelopment.meteorclient.settings.PacketListSetting;
import meteordevelopment.meteorclient.settings.Setting;
import meteordevelopment.meteorclient.settings.SettingGroup;
import meteordevelopment.meteorclient.systems.modules.Categories;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.ReflectUtils;
import meteordevelopment.meteorclient.utils.ReflectUtils.*;
import meteordevelopment.meteorclient.utils.network.PacketUtils;
import meteordevelopment.orbit.EventHandler;
import meteordevelopment.orbit.EventPriority;
import net.minecraft.network.ClientConnection;
import net.minecraft.network.listener.PacketListener;
import net.minecraft.network.packet.Packet;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class PacketChoker extends Module {
    private MethodInvoker clientConnHandlePacket = ReflectUtils.getMethod(ClientConnection.class, null, Packet.class, PacketListener.class);
    private FieldAccessor clientConnChannel = ReflectUtils.getField(ClientConnection.class, Channel.class, 0);
    private FieldAccessor clientConnPacketListener = ReflectUtils.getField(ClientConnection.class, PacketListener.class, 0);
    private ArrayList<Packet> chokedC2S = new ArrayList<>(0);
    private ArrayList<Packet> chokedS2C = new ArrayList<>(0);

    //This should be the packets' unique identifier(i.e. addreses), NOT relevant to the content itself

    private HashSet<Packet> seenPackets = new HashSet<>(0);
    boolean c2sLock = false;
    boolean s2cLock = false;


    public PacketChoker() {
        super(Categories.Exploits, "packet-choker", "Holds packets and processes/sends them on command.");
    }

    private final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final Setting<Set<Class<? extends Packet<?>>>> s2cPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("S2C-packets")
        .description("Server-to-client packets to choke.")
        .filter(aClass -> PacketUtils.getS2CPackets().contains(aClass))
        .build()
    );

    private final Setting<Set<Class<? extends Packet<?>>>> c2sPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("C2S-packets")
        .description("Client-to-server packets to choke.")
        .filter(aClass -> PacketUtils.getC2SPackets().contains(aClass))
        .build()
    );
    private final Setting<Boolean> logPackets = sgGeneral.add(new BoolSetting.Builder()
        .name("log-packets")
        .description("Logs choke/sends")
        .defaultValue(true)
        .build()
    );


    private void handleNewPacket(Packet<?> packet)
    {

        ClientConnection conn = mc.getNetworkHandler().getConnection();
        try
        {

            Channel channel = (Channel)clientConnChannel.get(conn);

            if(!channel.isOpen())
                return;
            clientConnHandlePacket.invoke(conn, packet, clientConnPacketListener.get(conn));

        }
        catch (Exception e){
            info("o noes exception !! :(");
            e.printStackTrace();
        };

    }



    public void UnchokeS2C()
    {
        s2cLock = true;
        info("Unchoking S2C");
        for(Packet p : chokedS2C)
        {
            if(logPackets.get())
                info("Resending " + PacketUtils.getName((Class<? extends Packet<?>>) p.getClass()));
            info(PacketUtils.getName((Class<? extends Packet<?>>) p.getClass()) + " Reprocessed!");
            handleNewPacket(p);
        }
        chokedS2C.clear();
        s2cLock = false;
    }
    public void UnchokeC2S()
    {
        c2sLock = true;
        info("Unchoking C2S");
        for(Packet p : chokedC2S)
        {
            if(logPackets.get())
                info("Resending " + PacketUtils.getName((Class<? extends Packet<?>>) p.getClass()));
            mc.getNetworkHandler().sendPacket(p);
        }
        chokedC2S.clear();
        c2sLock = false;
    }
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onReceivePacket(PacketEvent.Receive event) {
        if(s2cLock) return;
        //if(seenPackets.contains(event.packet)) return;
        if (s2cPackets.get().contains(event.packet.getClass()))
        {
            if(logPackets.get())
                info("Choked " + PacketUtils.getName((Class<? extends Packet<?>>) event.packet.getClass()));
            chokedS2C.add(event.packet);
            event.cancel();
        }
        //seenPackets.add(event.packet);

    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onSendPacket(PacketEvent.Send event) {
        if(c2sLock) return;
        //if(seenPackets.contains(event.packet)) return;
        if (c2sPackets.get().contains(event.packet.getClass()))
        {
            if(logPackets.get())
                info("Choked " + PacketUtils.getName((Class<? extends Packet<?>>) event.packet.getClass()));
            chokedC2S.add(event.packet);
            event.cancel();
        }
        //seenPackets.add(event.packet);
    }
    @Override
    public void onActivate()
    {
        seenPackets.clear();
    }

}
