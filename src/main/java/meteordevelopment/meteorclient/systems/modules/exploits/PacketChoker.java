/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

package meteordevelopment.meteorclient.systems.modules.exploits;

import io.netty.channel.Channel;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.settings.PacketListSetting;
import meteordevelopment.meteorclient.settings.Setting;
import meteordevelopment.meteorclient.settings.SettingGroup;
import meteordevelopment.meteorclient.systems.modules.Categories;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.network.PacketUtils;
import meteordevelopment.orbit.EventHandler;
import meteordevelopment.orbit.EventPriority;
import net.minecraft.network.ClientConnection;
import net.minecraft.network.listener.PacketListener;
import net.minecraft.network.packet.Packet;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Set;

public class PacketChoker extends Module {
    private Method clientConnHandlePacket;
    private Field clientConnChannel;
    private Field clientConnPacketListener;
    private ArrayList<Packet> chokedC2S;
    private ArrayList<Packet> chokedS2C;

    private void InitFieldsMethods()
    {
        //99.9% sure its gonna work so
        try {
            clientConnHandlePacket = ClientConnection.class.getDeclaredMethod("handlePacket", Packet.class, PacketListener.class);
            clientConnHandlePacket.setAccessible(true);
            clientConnPacketListener = ClientConnection.class.getDeclaredField("packetListener");
            clientConnPacketListener.setAccessible(true);
            clientConnChannel = ClientConnection.class.getDeclaredField("channel");
            clientConnChannel.setAccessible(true);

        }
        catch (Exception e){};
    }

    public PacketChoker() {
        super(Categories.Exploits, "packet-choker", "Holds packets and processes/sends them on command.");
        InitFieldsMethods();

    }

    private final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final Setting<Set<Class<? extends Packet<?>>>> s2cPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("S2C-packets")
        .description("Server-to-client packets to choke.")
        .filter(aClass -> PacketUtils.getS2CPackets().contains(aClass))
        .build()
    );

    private final Setting<Set<Class<? extends Packet<?>>>> c2sPackets = sgGeneral.add(new PacketListSetting.Builder()
        .name("C2S-packets")
        .description("Client-to-server packets to choke.")
        .filter(aClass -> PacketUtils.getC2SPackets().contains(aClass))
        .build()
    );

    private void handleNewPacket(Packet<?> packet)
    {
        ClientConnection conn = mc.getNetworkHandler().getConnection();
        try
        {
            Channel channel = (Channel)clientConnChannel.get(conn);
            if(!channel.isOpen())
                return;
            clientConnHandlePacket.invoke(packet, clientConnPacketListener.get(conn));

        }
        catch (Exception e){};

    }



    public void UnchokeS2C()
    {
        for(Packet p : chokedS2C)
        {
            handleNewPacket(p);
        }
        chokedS2C.clear();
    }
    public void UnchokeC2S()
    {
        for(Packet p : chokedC2S)
        {
            mc.getNetworkHandler().sendPacket(p);
        }
        chokedC2S.clear();
    }
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onReceivePacket(PacketEvent.Receive event) {

        if (s2cPackets.get().contains(event.packet.getClass()))
        {
            chokedS2C.add(event.packet);
            event.cancel();
        }

    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onSendPacket(PacketEvent.Send event) {
        if (s2cPackets.get().contains(event.packet.getClass()))
        {
            chokedC2S.add(event.packet);
            event.cancel();
        }
    }

}
